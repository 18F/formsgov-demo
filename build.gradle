import org.gradle.internal.os.OperatingSystem
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
    }
}

plugins {
    id "net.linguica.maven-settings" version "0.5"
    id "org.sonarqube" version "3.0"
    id "net.ltgt.apt-eclipse" version "0.18"
    id "net.ltgt.apt-idea" version "0.18"
    id "net.ltgt.apt" version "0.18"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.moowork.node" version "1.2.0"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11

assert System.properties['java.specification.version'] == '11'

apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
// apply plugin: 'propdeps'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

dependencyManagement {
    imports {
        mavenBom 'io.github.jhipster:jhipster-dependencies:' + jhipster_dependencies_version
        //jhipster-needle-gradle-dependency-management - JHipster will add additional dependencies management here
    }
}

defaultTasks 'bootRun'

group = 'gov.gsa.form.service.FormServiceApp'

version = '2.3'

description = 'Form service microservice'

bootWar {
    mainClassName = 'gov.gsa.form.service.FormServiceApp'
}

war {

}

springBoot {
    mainClassName = 'gov.gsa.form.service.FormServiceApp'
    buildInfo()
}

if (OperatingSystem.current().isWindows()) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }
} else {
    bootRun {
        sourceResources sourceSets.main
    }
}

apply from: 'gradle/docker.gradle'
apply from: 'gradle/sonar.gradle'
// apply from: 'gradle/liquibase.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}


if (project.hasProperty('zipkin')) {
    apply from: 'gradle/zipkin.gradle'
}

if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}


configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://repo.spring.io/libs-milestone"
        name "Spring Milestones"
    }
}

sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }
        resources.srcDir file('src/intTest/resources')
    }
}

configurations {
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile(group: "io.github.jhipster", name: "jhipster-framework") {
        exclude module: 'org.yaml:snakeyaml'
    }
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "net.logstash.logback:logstash-logback-encoder"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "com.hazelcast:hazelcast"

    compile "com.hazelcast:hazelcast-spring"
    compile "javax.cache:cache-api"
    compile "com.zaxxer:HikariCP"
    compile "commons-codec:commons-codec"
    compile "org.apache.commons:commons-lang3"
    compile "commons-io:commons-io"
    compile "javax.transaction:javax.transaction-api"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"

    runtime "org.apache.logging.log4j:log4j-api:2.7"
    runtime "org.apache.logging.log4j:log4j-core:2.7"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.zalando:problem-spring-web:0.24.0-RC.0"
    compile "com.github.vladimir-bukhtoyarov:bucket4j-core"
    compile "com.github.vladimir-bukhtoyarov:bucket4j-jcache"
//    compile "org.springframework.cloud:spring-cloud-starter"
//    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.retry:spring-retry"
//    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
//    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "io.jsonwebtoken:jjwt-api"
    runtime "io.jsonwebtoken:jjwt-impl"
    runtime "io.jsonwebtoken:jjwt-jackson"
    compile("io.springfox:springfox-swagger2") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"

    compile "org.projectlombok:lombok:1.18.4"
    compile "joda-time:joda-time:2.9.9"
    compile "com.opencsv:opencsv:4.0"
    compile "org.asynchttpclient:async-http-client:2.8.1"
    compile "org.jdom:jdom2:2.0.5"
    compile "org.modelmapper:modelmapper:2.3.0"
    compile "org.jsoup:jsoup:1.12.1"
    compile "javax.validation:validation-api:2.0.1.Final"
    compile "org.springframework.boot:spring-boot-starter-webflux:2.1.7.RELEASE"
    compile "org.projectreactor:reactor-spring:1.0.1.RELEASE"
    compile "org.reflections:reflections:0.9.11"
    compile("com.amazonaws:aws-java-sdk:1.11.705") {
        exclude module: 'aws-java-sdk-s3control'
    }
    compile "org.owasp.encoder:encoder:1.2.2"
    compile "com.google.guava:guava:29.0-jre"
    compile "org.everit.json:org.everit.json.schema:1.5.1"

    compile "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    compile "com.sun.xml.bind:jaxb-impl:2.4.0-b180830.0438"
    compile "com.sun.xml.bind:jaxb-core:2.3.0-b170127.1453"
    compile "org.javassist:javassist:3.27.0-GA"
    compile "javax.inject:javax.inject:1"
    compile "org.hibernate:hibernate-core"

    compile "com.github.ulisesbocchio:spring-boot-security-saml:1.17"

    compile group: 'org.opensaml', name: 'opensaml', version: '2.6.4'


    annotationProcessor "javax.annotation:javax.annotation-api:1.3.2"
    annotationProcessor("org.glassfish.jaxb:jaxb-runtime:2.3.3") {
        exclude group: 'com.sun.activation', module: 'jakarta.activation'

    }
    annotationProcessor "org.hibernate:hibernate-jpamodelgen"

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    annotationProcessor "org.projectlombok:lombok:1.18.16"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile "io.cucumber:cucumber-junit"
    testCompile "io.cucumber:cucumber-spring"

    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile('junit:junit:4.13')

    testCompile('org.hamcrest:hamcrest-all:1.3')
    testCompile('org.mockito:mockito-core:3.0.0')
    testCompile('org.springframework:spring-test:5.2.8.RELEASE')
    testCompile('org.powermock:powermock-api-mockito2:2.0.2')
    testCompile('org.powermock:powermock-module-junit4:2.0.2')
    testCompile('net.bytebuddy:byte-buddy:1.10.1')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.squareup.okhttp3:mockwebserver:3.2.0')
}

task intTest(type: Test) {
    description = "Execute Integration Test."
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn intTest
intTest.mustRunAfter test

task cleanResources(type: Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion = '6.5'
}

task stage(dependsOn: 'bootWar') {
}

if (project.hasProperty('nodeInstall')) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
